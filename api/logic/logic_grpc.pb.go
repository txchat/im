// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logic

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogicClient is the client API for Logic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogicClient interface {
	Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (*ConnectReply, error)
	Disconnect(ctx context.Context, in *DisconnectReq, opts ...grpc.CallOption) (*Reply, error)
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*Reply, error)
	Receive(ctx context.Context, in *ReceiveReq, opts ...grpc.CallOption) (*Reply, error)
	PushByUID(ctx context.Context, in *PushByUIDReq, opts ...grpc.CallOption) (*Reply, error)
	PushByKey(ctx context.Context, in *PushByKeyReq, opts ...grpc.CallOption) (*Reply, error)
	PushGroup(ctx context.Context, in *PushGroupReq, opts ...grpc.CallOption) (*Reply, error)
	JoinGroupByKey(ctx context.Context, in *JoinGroupByKeyReq, opts ...grpc.CallOption) (*Reply, error)
	JoinGroupByUID(ctx context.Context, in *JoinGroupByUIDReq, opts ...grpc.CallOption) (*Reply, error)
	LeaveGroupByKey(ctx context.Context, in *LeaveGroupByKeyReq, opts ...grpc.CallOption) (*Reply, error)
	LeaveGroupByUID(ctx context.Context, in *LeaveGroupByUIDReq, opts ...grpc.CallOption) (*Reply, error)
	DelGroup(ctx context.Context, in *DelGroupReq, opts ...grpc.CallOption) (*Reply, error)
}

type logicClient struct {
	cc grpc.ClientConnInterface
}

func NewLogicClient(cc grpc.ClientConnInterface) LogicClient {
	return &logicClient{cc}
}

func (c *logicClient) Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (*ConnectReply, error) {
	out := new(ConnectReply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Disconnect(ctx context.Context, in *DisconnectReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Receive(ctx context.Context, in *ReceiveReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) PushByUID(ctx context.Context, in *PushByUIDReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/PushByUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) PushByKey(ctx context.Context, in *PushByKeyReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/PushByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) PushGroup(ctx context.Context, in *PushGroupReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/PushGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) JoinGroupByKey(ctx context.Context, in *JoinGroupByKeyReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/JoinGroupByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) JoinGroupByUID(ctx context.Context, in *JoinGroupByUIDReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/JoinGroupByUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) LeaveGroupByKey(ctx context.Context, in *LeaveGroupByKeyReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/LeaveGroupByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) LeaveGroupByUID(ctx context.Context, in *LeaveGroupByUIDReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/LeaveGroupByUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) DelGroup(ctx context.Context, in *DelGroupReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/im.logic.Logic/DelGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicServer is the server API for Logic service.
// All implementations must embed UnimplementedLogicServer
// for forward compatibility
type LogicServer interface {
	Connect(context.Context, *ConnectReq) (*ConnectReply, error)
	Disconnect(context.Context, *DisconnectReq) (*Reply, error)
	Heartbeat(context.Context, *HeartbeatReq) (*Reply, error)
	Receive(context.Context, *ReceiveReq) (*Reply, error)
	PushByUID(context.Context, *PushByUIDReq) (*Reply, error)
	PushByKey(context.Context, *PushByKeyReq) (*Reply, error)
	PushGroup(context.Context, *PushGroupReq) (*Reply, error)
	JoinGroupByKey(context.Context, *JoinGroupByKeyReq) (*Reply, error)
	JoinGroupByUID(context.Context, *JoinGroupByUIDReq) (*Reply, error)
	LeaveGroupByKey(context.Context, *LeaveGroupByKeyReq) (*Reply, error)
	LeaveGroupByUID(context.Context, *LeaveGroupByUIDReq) (*Reply, error)
	DelGroup(context.Context, *DelGroupReq) (*Reply, error)
	mustEmbedUnimplementedLogicServer()
}

// UnimplementedLogicServer must be embedded to have forward compatible implementations.
type UnimplementedLogicServer struct {
}

func (UnimplementedLogicServer) Connect(context.Context, *ConnectReq) (*ConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedLogicServer) Disconnect(context.Context, *DisconnectReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedLogicServer) Heartbeat(context.Context, *HeartbeatReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedLogicServer) Receive(context.Context, *ReceiveReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedLogicServer) PushByUID(context.Context, *PushByUIDReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushByUID not implemented")
}
func (UnimplementedLogicServer) PushByKey(context.Context, *PushByKeyReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushByKey not implemented")
}
func (UnimplementedLogicServer) PushGroup(context.Context, *PushGroupReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushGroup not implemented")
}
func (UnimplementedLogicServer) JoinGroupByKey(context.Context, *JoinGroupByKeyReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroupByKey not implemented")
}
func (UnimplementedLogicServer) JoinGroupByUID(context.Context, *JoinGroupByUIDReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroupByUID not implemented")
}
func (UnimplementedLogicServer) LeaveGroupByKey(context.Context, *LeaveGroupByKeyReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroupByKey not implemented")
}
func (UnimplementedLogicServer) LeaveGroupByUID(context.Context, *LeaveGroupByUIDReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroupByUID not implemented")
}
func (UnimplementedLogicServer) DelGroup(context.Context, *DelGroupReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelGroup not implemented")
}
func (UnimplementedLogicServer) mustEmbedUnimplementedLogicServer() {}

// UnsafeLogicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogicServer will
// result in compilation errors.
type UnsafeLogicServer interface {
	mustEmbedUnimplementedLogicServer()
}

func RegisterLogicServer(s grpc.ServiceRegistrar, srv LogicServer) {
	s.RegisterService(&Logic_ServiceDesc, srv)
}

func _Logic_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Connect(ctx, req.(*ConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Disconnect(ctx, req.(*DisconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Receive(ctx, req.(*ReceiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_PushByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushByUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).PushByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/PushByUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).PushByUID(ctx, req.(*PushByUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_PushByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushByKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).PushByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/PushByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).PushByKey(ctx, req.(*PushByKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_PushGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).PushGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/PushGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).PushGroup(ctx, req.(*PushGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_JoinGroupByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupByKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).JoinGroupByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/JoinGroupByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).JoinGroupByKey(ctx, req.(*JoinGroupByKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_JoinGroupByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupByUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).JoinGroupByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/JoinGroupByUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).JoinGroupByUID(ctx, req.(*JoinGroupByUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_LeaveGroupByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupByKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).LeaveGroupByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/LeaveGroupByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).LeaveGroupByKey(ctx, req.(*LeaveGroupByKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_LeaveGroupByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupByUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).LeaveGroupByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/LeaveGroupByUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).LeaveGroupByUID(ctx, req.(*LeaveGroupByUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_DelGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).DelGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.logic.Logic/DelGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).DelGroup(ctx, req.(*DelGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Logic_ServiceDesc is the grpc.ServiceDesc for Logic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "im.logic.Logic",
	HandlerType: (*LogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Logic_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Logic_Disconnect_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Logic_Heartbeat_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _Logic_Receive_Handler,
		},
		{
			MethodName: "PushByUID",
			Handler:    _Logic_PushByUID_Handler,
		},
		{
			MethodName: "PushByKey",
			Handler:    _Logic_PushByKey_Handler,
		},
		{
			MethodName: "PushGroup",
			Handler:    _Logic_PushGroup_Handler,
		},
		{
			MethodName: "JoinGroupByKey",
			Handler:    _Logic_JoinGroupByKey_Handler,
		},
		{
			MethodName: "JoinGroupByUID",
			Handler:    _Logic_JoinGroupByUID_Handler,
		},
		{
			MethodName: "LeaveGroupByKey",
			Handler:    _Logic_LeaveGroupByKey_Handler,
		},
		{
			MethodName: "LeaveGroupByUID",
			Handler:    _Logic_LeaveGroupByUID_Handler,
		},
		{
			MethodName: "DelGroup",
			Handler:    _Logic_DelGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic/logic.proto",
}
