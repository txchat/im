syntax = "proto3";

package im.logic;
option go_package = "github.com/txchat/im/api/logic;logic";

import "github.com/txchat/im/api/protocol/protocol.proto";

message ConnectReq {
  string server = 1; // 客户端连接的是哪个 comet
  im.protocol.Proto proto = 3;
}

message ConnectReply {
  string key = 1;
  string appId = 2;
  string uid = 3;
  int64 heartbeat = 4;
}

message DisconnectReq {
  string key = 1;
  string server = 2;
}

message HeartbeatReq {
  string key = 1;
  string server = 2;
}

message ReceiveReq {
  string key = 1;
  im.protocol.Proto proto = 3;
}

message Reply {
  bool isOk = 1;
  bytes msg = 2;
}

// received from A publish to MQ
message ReceivedMessage {
  string appId = 1;
  string key = 2;
  string from = 3;
  im.protocol.Op op = 4;
  bytes body = 5;
}

// biz --> logic
message SendByUIDReq {
  string appId = 1;
  string uid = 2;
  im.protocol.Op op = 3;
  bytes body = 4;
}

// biz --> logic
message PushByUIDReq {
  string appId = 1;
  repeated string toId = 2;
  im.protocol.Op op = 3;
  bytes body = 4;
}

// biz --> logic
message PushByKeyReq {
  string appId = 1;
  repeated string toKey = 2;
  im.protocol.Op op = 3;
  bytes body = 4;
}

// biz --> logic
message PushGroupReq {
  string appId = 1;
  string group = 2;
  im.protocol.Op op = 3;
  bytes body = 4;
}

// biz --> logic
message JoinGroupByKeyReq {
  string appId = 1;
  repeated string key = 2;
  repeated string gid = 3;
}

message LeaveGroupByKeyReq {
  string appId = 1;
  repeated string key = 2;
  repeated string gid = 3;
}

// biz --> logic
message JoinGroupByUIDReq {
  string appId = 1;
  repeated string uid = 2;
  repeated string gid = 3;
}

message LeaveGroupByUIDReq {
  string appId = 1;
  repeated string uid = 2;
  repeated string gid = 3;
}

// biz --> logic
message DelGroupReq {
  string appId = 1;
  repeated string gid = 2;
}

service Logic {
  rpc Connect(ConnectReq) returns (ConnectReply); // for comet
  rpc Disconnect(DisconnectReq) returns (Reply);  // for comet
  rpc Heartbeat(HeartbeatReq) returns (Reply);    // for comet
  rpc Receive(ReceiveReq) returns (Reply);        // for comet

  rpc SendByUID(SendByUIDReq) returns (Reply);             // for biz
  rpc PushByUID(PushByUIDReq) returns (Reply);             // for biz
  rpc PushByKey(PushByKeyReq) returns (Reply);             // for biz
  rpc PushGroup(PushGroupReq) returns (Reply);             // for biz
  rpc JoinGroupByKey(JoinGroupByKeyReq) returns (Reply);   // for biz
  rpc JoinGroupByUID(JoinGroupByUIDReq) returns (Reply);   // for biz
  rpc LeaveGroupByKey(LeaveGroupByKeyReq) returns (Reply); // for biz
  rpc LeaveGroupByUID(LeaveGroupByUIDReq) returns (Reply); // for biz
  rpc DelGroup(DelGroupReq) returns (Reply);               // for biz
}
